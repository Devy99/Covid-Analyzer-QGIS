# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CovidAnalyzer
                                 A QGIS plugin
 This plugin tracks Covid-19 cases
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by  
        email                :  
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Qgis library
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon, QColor, QFont
from qgis.PyQt.QtWidgets import QAction, QProgressBar
from qgis.core import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QFileDialog

from qgis.gui import (
    QgsMapCanvas,
    QgsVertexMarker,
    QgsMapCanvasItem,
    QgsRubberBand,
    QgsMessageBar
)
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .covid_analyzer_dialog import CovidAnalyzerDialog

# Join library
import processing

# CSV handling library
import pandas as pd

# Utility import
import os.path
import os
import shutil
import io
import time
import requests
from datetime import timedelta 
import tempfile

# Math expression library
import math


# Absolute path of plugin folder
THIS_FOLDER = os.path.dirname(os.path.abspath(__file__))

# Path of Region layer file and Province layer file 
PROV_PATH = os.path.join(THIS_FOLDER, 'layers/italy_boundaries/italy_prov/ProvCM01012020_WGS84.shp')
REG_PATH = os.path.join(THIS_FOLDER, 'layers/italy_boundaries/italy_reg/Reg01012020_WGS84.shp')

# Instantiate layers
reg_layer = QgsVectorLayer(REG_PATH, "Region layer", "ogr")
prov_layer = QgsVectorLayer(PROV_PATH, "Province layer", "ogr")

# Static declaration of layersMap
layersMap = {"Province layer": prov_layer, "Region layer": reg_layer}

# Static declaration of Maps that contains the value in a typeComboBox
typeMapRegion = {"Casi totali": "csv_den_totale_casi", "Casi quotidiani": "csv_den_nuovi_positivi", "Tamponi": "csv_den_tamponi",
                 "Dimessi guariti": "csv_den_dimessi_guariti", "Deceduti": "csv_den_deceduti"}

typeMapProvice = {"Casi totali": "csv_den_totale_casi", "Variazione casi": "csv_den_variazione"}

typeMapRegionAux = {"Casi totali": "totale_casi", "Casi quotidiani": "nuovi_positivi", "Tamponi": "tamponi",
                    "Dimessi guariti": "dimessi_guariti", "Deceduti": "deceduti"}

typeMapProviceAux = {"Casi totali": "totale_casi", "Variazione casi": "variazione"}

typeMapRegionAux2 = {"Casi totali": "csv_totale_casi", "Casi quotidiani": "csv_nuovi_positivi", "Tamponi": "csv_tamponi",
                     "Dimessi guariti": "csv_dimessi_guariti", "Deceduti": "csv_deceduti"}

typeMapProviceAux2 = {"Casi totali": "csv_totale_casi", "Variazione casi": "csv_variazione"}


# Layer type constants
REGION_LAYER = "Region layer"
PROVINCE_LAYER = "Province layer"

# Instantiate a global canvas
canvas = QgsMapCanvas()

# Csv costant prefixs and suffix
PROV_URL_PREFIX = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province-'
REG_URL_PREFIX = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni-'
URL_SUFFIX = '.csv'

class CovidAnalyzer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CovidAnalyzer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Covid Analyzer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CovidAnalyzer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/covid_analyzer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Check pandemic data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Covid Analyzer'),
                action)
            self.iface.removeToolBarIcon(action)

    def showLabels(self, layer):
        layerAux = self.ui.layerComboBox.currentText()
        check = self.ui.labelCheckBox.isChecked()

        if (check):
            if (layerAux == REGION_LAYER):
                mapAux = typeMapRegion
            elif (layerAux == PROVINCE_LAYER):
                mapAux = typeMapProvice
        elif (not check):
            if (layerAux == REGION_LAYER):
                mapAux = typeMapRegionAux2
            elif (layerAux == PROVINCE_LAYER):
                mapAux = typeMapProviceAux2
        
        layerType = self.ui.typeComboBox.currentText()
        palLayer = QgsPalLayerSettings()
        palLayer.fieldName = mapAux[layerType]
        palLayer.enabled = True
        palLayer.placement = QgsPalLayerSettings.OverPoint
        labels = QgsVectorLayerSimpleLabeling(palLayer)
        layer.setLabeling(labels)
        layer.setLabelsEnabled(True)
        layer.triggerRepaint()

    def initColorScale(self, typeName, d):

        if (typeName == 'Deceduti' or typeName == 'Casi totali' or typeName == 'Casi quotidiani'):
            rangeColor1 = QtGui.QColor('#FFFEEF')
            rangeColor2 = QtGui.QColor('#EEDCD2')
            rangeColor3 = QtGui.QColor('#E4C5BE')
            rangeColor4 = QtGui.QColor('#D7A9A6')
            rangeColor5 = QtGui.QColor('#CD9493')
            rangeColor6 = QtGui.QColor('#C48081')
            rangeColor7 = QtGui.QColor('#B9666A')
            rangeColor8 = QtGui.QColor('#B1565B')
            rangeColor9 = QtGui.QColor('#A84146')
            rangeColor10 = QtGui.QColor('#A61022')
        elif (typeName == 'Dimessi guariti'):
            rangeColor1 = QtGui.QColor('#F0F9F5')
            rangeColor2 = QtGui.QColor('#DBF1E8')
            rangeColor3 = QtGui.QColor('#C7E9DB')
            rangeColor4 = QtGui.QColor('#B2DFCD')
            rangeColor5 = QtGui.QColor('#9AD5BD')
            rangeColor6 = QtGui.QColor('#7FCDB0')
            rangeColor7 = QtGui.QColor('#75C3A0')
            rangeColor8 = QtGui.QColor('#63BA91')
            rangeColor9 = QtGui.QColor('#57B284')
            rangeColor10 = QtGui.QColor('#4BA672')
        elif (typeName == 'Tamponi'):
            rangeColor1 = QtGui.QColor('#ECF1F9')
            rangeColor2 = QtGui.QColor('#D9E2F2')
            rangeColor3 = QtGui.QColor('#BECEE9')
            rangeColor4 = QtGui.QColor('#A7BDE1')
            rangeColor5 = QtGui.QColor('#8FABDA')
            rangeColor6 = QtGui.QColor('#7899D2')
            rangeColor7 = QtGui.QColor('#6288CB')
            rangeColor8 = QtGui.QColor('#4C78C3')
            rangeColor9 = QtGui.QColor('#3667BC')
            rangeColor10 = QtGui.QColor('#2156B4')
        elif (typeName == 'Variazione casi'):
            if (d < 0 and d >= -50):
                rangeColorNeg1 = QtGui.QColor('#ECF1F9')
                rangeColor1 = QtGui.QColor('#EEDCD2')
                rangeColor2 = QtGui.QColor('#C48081')
                rangeColor3 = QtGui.QColor('#A61022')
            elif (d < -50 and d >= -100):
                rangeColorNeg1 = QtGui.QColor('#ECF1F9')
                rangeColorNeg2 = QtGui.QColor('#BECEE9')
                rangeColor1 = QtGui.QColor('#EEDCD2')
                rangeColor2 = QtGui.QColor('#C48081')
                rangeColor3 = QtGui.QColor('#A61022')
            elif (d < -100):
                rangeColorNeg1 = QtGui.QColor('#ECF1F9')
                rangeColorNeg2 = QtGui.QColor('#BECEE9')
                rangeColorNeg3 = QtGui.QColor('#2156B4')
                rangeColor1 = QtGui.QColor('#EEDCD2')
                rangeColor2 = QtGui.QColor('#C48081')
                rangeColor3 = QtGui.QColor('#A61022')
            elif (d >= 0):
                rangeColor1 = QtGui.QColor('#EEDCD2')
                rangeColor2 = QtGui.QColor('#C48081')
                rangeColor3 = QtGui.QColor('#A61022')

        if (typeName == 'Variazione casi'):
            if (d < 0 and d >= -50):
                rangeColorList = [rangeColorNeg1, rangeColor1, rangeColor2, rangeColor3]
            elif (d < -50 and d >= -100):
                rangeColorList = [rangeColorNeg1, rangeColorNeg2, rangeColor1, rangeColor2, rangeColor3]
            elif (d < -100):
                rangeColorList = [rangeColorNeg1, rangeColorNeg2, rangeColorNeg3, rangeColor1, rangeColor2, rangeColor3]
            elif (d >= 0):
                rangeColorList = [rangeColor1, rangeColor2, rangeColor3]
        elif (typeName != 'Variazione casi'):
            rangeColorList = [rangeColor1, rangeColor2, rangeColor3, rangeColor4, rangeColor5, 
                              rangeColor6, rangeColor7, rangeColor8, rangeColor9, rangeColor10]

        return rangeColorList


    def showGraduation(self, layer, csvUri):
        rangeList = []
        opacity = 1

        df = pd.read_csv(csvUri)

        layerAux = self.ui.layerComboBox.currentText()
        if (layerAux == REGION_LAYER):
            mapAux = typeMapRegionAux
        elif (layerAux == PROVINCE_LAYER):
            mapAux = typeMapProviceAux

        typeName = self.ui.typeComboBox.currentText()

        if (typeName == 'Deceduti'):
            targetField = 'csv_deceduti'
        elif (typeName == 'Casi totali'):
            targetField = 'csv_totale_casi'
        elif (typeName == 'Casi quotidiani'):
            targetField = 'csv_nuovi_positivi'
        elif (typeName == 'Dimessi guariti'):
            targetField = 'csv_dimessi_guariti'
        elif (typeName == 'Tamponi'):
            targetField = 'csv_tamponi'
        elif (typeName == 'Variazione casi'):
            targetField = 'csv_variazione'

        #FINDING MAX e MIN
        p = df[mapAux[typeName]].max()
        d = df[mapAux[typeName]].min()

        rangeColorList = self.initColorScale(typeName, d)

        if (typeName != 'Variazione casi'):
            
            # Calcolate range interval for graduation scale
            interval = p/10

            # Static declaration of list that contains max value of each range
            maxValList = [math.floor(interval), math.floor(interval*2), math.floor(interval*3), math.floor(interval*4), math.floor(interval*5),
                          math.floor(interval*6), math.floor(interval*7), math.floor(interval*8), math.floor(interval*9), math.floor(interval*10)]

            # Static declaration of list that contains min value of each range
            minValList = [0.0, maxValList[0] +1, maxValList[1] +1, maxValList[2] +1, maxValList[3] +1,
                          maxValList[4] +1, maxValList[5] +1, maxValList[6] +1, maxValList[7] +1, maxValList[8] +1]

            # Static declaration of list that contains the string value of each range
            labelList = ['0 - ' + str(maxValList[0]), str(minValList[1]) + ' - ' + str(maxValList[1]), str(minValList[2]) + ' - ' + str(maxValList[2]),
                         str(minValList[3]) + ' - ' + str(maxValList[3]), str(minValList[4]) + ' - ' + str(maxValList[4]), str(minValList[5]) + ' - ' + str(maxValList[5]),
                         str(minValList[6]) + ' - ' + str(maxValList[6]), str(minValList[7]) + ' - ' + str(maxValList[7]), str(minValList[8]) + ' - ' + str(maxValList[8]),
                         str(minValList[9]) + ' - ' + str(maxValList[9])]

            symbol1 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol2 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol3 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol4 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol5 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol6 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol7 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol8 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol9 = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol10 = QgsSymbol.defaultSymbol(layer.geometryType())

            symbolList = []
            symbolList.append(symbol1)
            symbolList.append(symbol2)
            symbolList.append(symbol3)
            symbolList.append(symbol4)
            symbolList.append(symbol5)
            symbolList.append(symbol6)
            symbolList.append(symbol7)
            symbolList.append(symbol8)
            symbolList.append(symbol9)
            symbolList.append(symbol10)

            for i in range(0, 10):
                symbolList[i].setColor(rangeColorList[i])
                symbolList[i].setOpacity(opacity)

            rangeList = []
            range1 = QgsRendererRange(minValList[0], maxValList[0], symbolList[0], labelList[0])
            range2 = QgsRendererRange(minValList[1], maxValList[1], symbolList[1], labelList[1])
            range3 = QgsRendererRange(minValList[2], maxValList[2], symbolList[2], labelList[2])
            range4 = QgsRendererRange(minValList[3], maxValList[3], symbolList[3], labelList[3])
            range5 = QgsRendererRange(minValList[4], maxValList[4], symbolList[4], labelList[4])
            range6 = QgsRendererRange(minValList[5], maxValList[5], symbolList[5], labelList[5])
            range7 = QgsRendererRange(minValList[6], maxValList[6], symbolList[6], labelList[6])
            range8 = QgsRendererRange(minValList[7], maxValList[7], symbolList[7], labelList[7])
            range9 = QgsRendererRange(minValList[8], maxValList[8], symbolList[8], labelList[8])
            range10 = QgsRendererRange(minValList[9], maxValList[9], symbolList[9], labelList[9])
            
            rangeList.append(range1)
            rangeList.append(range2)
            rangeList.append(range3)
            rangeList.append(range4)
            rangeList.append(range5)
            rangeList.append(range6)
            rangeList.append(range7)
            rangeList.append(range8)
            rangeList.append(range9)
            rangeList.append(range10)

        elif (typeName == 'Variazione casi'):
            if (d < 0 and d >= -50):

                interval = p/3
                
                maxValList = [0, math.floor(interval), math.floor(interval*2), p]
                minValList = [d, maxValList[0] + 1, maxValList[1] + 1, maxValList[2], + 1]
                labelList = [str(minValList[0]) + ' - ' + str(maxValList[0]), str(minValList[1]) + ' - ' + str(maxValList[1]),
                             str(minValList[2]) + ' - ' + str(maxValList[2]), str(minValList[3]) + ' - ' + str(maxValList[3])]


                symbol1 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol2 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol3 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol4 = QgsSymbol.defaultSymbol(layer.geometryType())

                symbolList = []
                symbolList.append(symbol1)
                symbolList.append(symbol2)
                symbolList.append(symbol3)
                symbolList.append(symbol4)

                for i in range(0, 4):
                    symbolList[i].setColor(rangeColorList[i])
                    symbolList[i].setOpacity(opacity)

                rangeNeg1 = QgsRendererRange(minValList[0], maxValList[0], symbolList[0], labelList[0])
                range1 = QgsRendererRange(minValList[1], maxValList[1], symbolList[1], labelList[1])
                range2 = QgsRendererRange(minValList[2], maxValList[2], symbolList[2], labelList[2])
                range3 = QgsRendererRange(minValList[3], maxValList[3], symbolList[3], labelList[3])

                rangeList = []
                rangeList.append(rangeNeg1)
                rangeList.append(range1)
                rangeList.append(range2)
                rangeList.append(range3)

            elif (d < 0 and d >= -100):

                interval = p/3

                maxValList [math.ceil(d/2), 0, math.floor(interval), math.floor(interval*2), p]
                minValList = [d, maxValList[0] + 1, maxValList[1] + 1, maxValList[2] + 1, maxValList[3] + 1]
                labelList = [str(minValList[0]) + ' - ' + str(maxValList[0]), str(minValList[1]) + ' - ' + str(maxValList[1]),
                             str(minValList[2]) + ' - ' + str(maxValList[2]), str(minValList[3]) + ' - ' + str(maxValList[3]),
                             str(minValList[3]) + ' - ' + str(maxValList[3])]

                symbol1 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol2 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol3 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol4 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol5 = QgsSymbol.defaultSymbol(layer.geometryType())

                symbolList = []
                symbolList.append(symbol1)
                symbolList.append(symbol2)
                symbolList.append(symbol3)
                symbolList.append(symbol4)
                symbolList.append(symbol5)

                for i in range(0, 5):
                    symbolList[i].setColor(rangeColorList[i])
                    symbolList[i].setOpacity(opacity)

                rangeNeg1 = QgsRendererRange(minValList[0], maxValList[0], symbolList[0], labelList[0])
                rangeNeg2 = QgsRendererRange(minValList[1], maxValList[1], symbolList[1], labelList[1])
                range1 = QgsRendererRange(minValList[2], maxValList[2], symbolList[2], labelList[2])
                range2 = QgsRendererRange(minValList[3], maxValList[3], symbolList[3], labelList[3])
                range3 = QgsRendererRange(minValList[4], maxValList[4], symbolList[4], labelList[4])

                rangeList = []
                rangeList.append(rangeNeg1)
                rangeList.append(rangeNeg2)
                rangeList.append(range1)
                rangeList.append(range2)
                rangeList.append(range3)

            elif (d < -100):
                
                intervalNeg = math.ceil(d/3)
                interval = p/3

                maxValList = [intervalNeg*2, math.ceil(intervalNeg), 0, math.floor(interval), math.floor(interval*2), p]
                minValList = [d, maxValList[0] + 1, maxValList[1] + 1, maxValList[2] + 1, maxValList[3] + 1, maxValList[4] + 1]
                labelList = [str(minValList[0]) + ' - ' + str(maxValList[0]), str(minValList[1]) + ' - ' + str(maxValList[1]),
                             str(minValList[2]) + ' - ' + str(maxValList[2]), str(minValList[3]) + ' - ' + str(maxValList[3]),
                             str(minValList[4]) + ' - ' + str(maxValList[4]), str(minValList[4]) + ' - ' + str(maxValList[4])]

                symbol1 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol2 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol3 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol4 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol5 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol6 = QgsSymbol.defaultSymbol(layer.geometryType())

                symbolList = []
                symbolList.append(symbol1)
                symbolList.append(symbol2)
                symbolList.append(symbol3)
                symbolList.append(symbol4)
                symbolList.append(symbol5)

                for i in range(0, 6):
                    symbolList[i].setColor(rangeColorList[i])
                    symbolList[i].setOpacity(opacity)

                rangeNeg1 = QgsRendererRange(minValList[0], maxValList[0], symbolList[0], labelList[0])
                rangeNeg2 = QgsRendererRange(minValList[1], maxValList[1], symbolList[1], labelList[1])
                rangeNeg3 = QgsRendererRange(minValList[2], maxValList[2], symbolList[2], labelList[2])
                range1 = QgsRendererRange(minValList[3], maxValList[3], symbolList[3], labelList[3])
                range2 = QgsRendererRange(minValList[4], maxValList[4], symbolList[4], labelList[4])
                range3 = QgsRendererRange(minValList[5], maxValList[5], symbolList[5], labelList[5])

                rangeList = []
                rangeList.append(rangeNeg1)
                rangeList.append(rangeNeg2)
                rangeList.append(rangeNeg3)
                rangeList.append(range1)
                rangeList.append(range2)
                rangeList.append(range3)

            elif (d >= 0):

                interval = p/3

                maxValList = [math.floor(interval), math.floor(interval*2), p]
                minValList = [0, maxValList[0] + 1, maxValList[1] + 1]
                labelList = [str(minValList[0]) + ' - ' + str(maxValList[0]), str(minValList[1]) + ' - ' + str(maxValList[1]),
                             str(minValList[2]) + ' - ' + str(maxValList[2])]
                
                symbol1 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol2 = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol3 = QgsSymbol.defaultSymbol(layer.geometryType())

                symbolList = []
                symbolList.append(symbol1)
                symbolList.append(symbol2)
                symbolList.append(symbol3)

                range1 = QgsRendererRange(minValList[0], maxValList[0], symbolList[0], labelList[0])
                range2 = QgsRendererRange(minValList[1], maxValList[1], symbolList[1], labelList[1])
                range3 = QgsRendererRange(minValList[2], maxValList[2], symbolList[2], labelList[2])

                for i in range(0, 3):
                    symbolList[i].setColor(rangeColorList[i])
                    symbolList[i].setOpacity(opacity)

                rangeList = []

                rangeList.append(range1)
                rangeList.append(range2)
                rangeList.append(range3)

        # create the renderer
        groupRenderer = QgsGraduatedSymbolRenderer('', rangeList)
        groupRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
        groupRenderer.setClassAttribute(targetField)
        
        # apply renderer to layer
        layer.setRenderer(groupRenderer)


    def resetUi(self): 
        self.first_start = True

    def showCanvas(self):
        try:
            selectedDate = getCurrentDateFromUI(self)
            csvFilename = downloadCsvByDate(self, selectedDate)
        except Exception as ex:
            self.iface.messageBar().pushMessage("Error", str(ex), level=Qgis.Critical)
            showPopup("error", str(ex), None, None, None)
            return None

        canvas.setCanvasColor(Qt.white)
        canvas.enableAntiAliasing(True)
        canvas.move(50,50)
        canvas.show()

        layerName = self.ui.layerComboBox.currentText()
        layer = layersMap[layerName]
        
        if not layer.isValid():
            print("Layer failed to load!")
        
        performTableJoin(self, csvFilename, layerName)
        relativeFilepath = 'csv_cache/' + csvFilename
        csvFilepath = os.path.join(THIS_FOLDER, relativeFilepath)
        csvUri = "file:///" + csvFilepath

        layerToAdd = QgsVectorLayer(csvUri, 'TemporaryLayer', 'delimitedtext')
        layerToAdd = layersMap["Join result"]

        if (self.ui.graduatedCheckBox.isChecked()):
            self.showGraduation(layerToAdd, csvUri)

        # set extent to the extent of our layer
        canvas.setExtent(layerToAdd.extent())

        # set the map canvas layer set
        canvas.setLayers([layerToAdd])

        self.showLabels(layerToAdd)

    def confirm(self):

        if (self.ui.pdfCheckBox.isChecked()):
            self.showLayout()
        else:
            try:
                selectedDate = getCurrentDateFromUI(self)
                csvFilename = downloadCsvByDate(self, selectedDate)
            except Exception as ex:
                self.iface.messageBar().pushMessage("Errore", str(ex), level=Qgis.Critical)
                showPopup("error", str(ex), None, None, None)

                return None

            layerName = self.ui.layerComboBox.currentText()
            layer = layersMap[layerName]
            
            if not layer.isValid():
                print("Layer failed to load!")
            
            performTableJoin(self, csvFilename, layerName)
            relativeFilepath = 'csv_cache/' + csvFilename
            csvFilepath = os.path.join(THIS_FOLDER, relativeFilepath)
            csvUri = "file:///" + csvFilepath

            layerToAdd = QgsVectorLayer(csvUri, 'TemporaryLayer', 'delimitedtext')
            layerToAdd = layersMap["Join result"]

            if (self.ui.graduatedCheckBox.isChecked()):
                self.showGraduation(layerToAdd, csvUri)

            self.showLabels(layerToAdd)

            QgsProject.instance().addMapLayer(layerToAdd)

        # Close Plugin window
        self.ui.close()

    def exportPdf(self, layer, typeName, layout):

        fd = QFileDialog()
        fd.setOption(QFileDialog.ShowDirsOnly, True)
        options = fd.options()
        result = fd.getExistingDirectory(parent=None, caption="Save File", directory="", options=options)

        if (result != None):
            fn = result + '/' + layer.name() + typeName + ".pdf"
            exporter = QgsLayoutExporter(layout)
            exporter.exportToPdf(fn, QgsLayoutExporter.PdfExportSettings())
    
    def setPdfCheckBoxFalse(self):
        self.ui.pdfCheckBox.setChecked(False)

    def showLayout(self):

        QgsProject.instance().removeAllMapLayers()

        try:
            selectedDate = getCurrentDateFromUI(self)
            csvFilename = downloadCsvByDate(self, selectedDate)
        except Exception as ex:
            self.iface.messageBar().pushMessage("Error", str(ex), level=Qgis.Critical)
            return None

        layerName = self.ui.layerComboBox.currentText()
        layer = layersMap[layerName]
        typeName = self.ui.typeComboBox.currentText()
        
        if not layer.isValid():
            print("Layer failed to load!")
        
        performTableJoin(self, csvFilename, layerName)
        relativeFilepath = 'csv_cache/' + csvFilename
        csvFilepath = os.path.join(THIS_FOLDER, relativeFilepath)
        csvUri = "file:///" + csvFilepath

        layerToAdd = QgsVectorLayer(csvUri, 'TemporaryLayer', 'delimitedtext')
        layerToAdd = layersMap["Join result"]

        if (self.ui.graduatedCheckBox.isChecked()):
            self.showGraduation(layerToAdd, csvUri)

        self.showLabels(layerToAdd)

        QgsProject.instance().addMapLayer(layerToAdd)

        project = QgsProject.instance()
        manager = project.layoutManager()
        layoutName = 'LegendLayout'
        layoutsList = manager.printLayouts()
        # remove any duplicate layouts
        for layout in layoutsList:
            if layout.name() == layoutName:
                manager.removeLayout(layout)
        layout = QgsPrintLayout(project)
        layout.initializeDefaults()
        layout.setName(layoutName)
        manager.addLayout(layout)
        
        # create map item in the layout
        map = QgsLayoutItemMap(layout)
        map.setRect(20, 20, 20, 20)
        
        # set the map extent
        ms = QgsMapSettings()
        ms.setLayers([layerToAdd]) # set layers to be mapped
        rect = QgsRectangle(ms.fullExtent())
        rect.scale(1.5)
        ms.setExtent(rect)
        map.setExtent(rect)
        map.setBackgroundColor(QColor(255, 255, 255, 0))
        layout.addLayoutItem(map)
        
        map.attemptMove(QgsLayoutPoint(5, 20, QgsUnitTypes.LayoutMillimeters))
        map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

        legend = QgsLayoutItemLegend(layout)
        legend.setTitle("Legend")
        layout.addLayoutItem(legend)
        legend.attemptMove(QgsLayoutPoint(230, 15, QgsUnitTypes.LayoutMillimeters))
        
        title = QgsLayoutItemLabel(layout)

        if csvFilename[:3] == "Reg":
           layer_type = "Regioni"
        elif csvFilename[:4] == "Prov":
            layer_type = "Province"

        title.setText(typeName + "  " + layer_type + "  " +  str(selectedDate))
        title.setFont(QFont('Arial', 20))
        title.adjustSizeToText()
        layout.addLayoutItem(title)
        title.attemptMove(QgsLayoutPoint(90, 1, QgsUnitTypes.LayoutMillimeters))
        
        layout = manager.layoutByName(layoutName)

        self.exportPdf(layerToAdd, typeName, layout)

        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.ui = CovidAnalyzerDialog()

        # show the dialog
        self.ui.show()

        initComponentsGUI(self)


        # Widget signals
        self.ui.layerComboBox.currentIndexChanged.connect(lambda: updateInformationComboBox(self))
        self.ui.pdfCheckBox.clicked.connect(lambda: handlePdfCheckBox(self))
        self.ui.previewButton.clicked.connect(self.showCanvas)
        self.ui.rejected.connect(self.resetUi)
        self.ui.confirmButton.clicked.connect(self.confirm)
        self.ui.cacheButton.clicked.connect(lambda: showPopup("warning", "Sei sicuro di voler svuotare la cache?", "Cancellando la cache non sarai in grado di recuperare i dati scaricati in precedenza in modalità offline.", clearCache, None))

        # Run the dialog event loop
        result = self.ui.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

###################################### UTILS METHODS ######################################

#################### GUI METHODS ####################

def initComponentsGUI(self):
    # Clearing existing data
    self.ui.typeComboBox.clear()
    self.ui.layerComboBox.clear()

    # Init layers comboBox
    layersNameList = ["Region layer", "Province layer"]
    self.ui.layerComboBox.addItems(layersNameList)
    
    # Init informations comboBox
    informationsList = ["Casi totali","Casi quotidiani","Tamponi","Dimessi guariti","Deceduti"]
    self.ui.typeComboBox.addItems(informationsList)

def showPopup(type, message, informativeMessage, okFunction, cancelFunction ):
    msg = QMessageBox()
    msg.setText(message)

    if(informativeMessage):
        msg.setInformativeText(informativeMessage)

    if(type == "error"):
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Errore")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()
    elif(type == "warning"):
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("Attenzione")
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

        returnValue = msg.exec_()
        if returnValue == QtGui.QMessageBox.Ok and okFunction != None:
            okFunction()
            QgsMessageLog.logMessage( "Ok cliccato" , 'MyPlugin', level=Qgis.Info)
        elif returnValue == QtGui.QMessageBox.Cancel and cancelFunction != None:
            cancelFunction()
            QgsMessageLog.logMessage( "Cancel cliccato" , 'MyPlugin', level=Qgis.Info)

def clearCache():
    path = os.path.join(THIS_FOLDER, 'csv_cache/')
    shutil.rmtree(path, ignore_errors=True, onerror=None)
    os.makedirs(path)

def updateInformationComboBox(self):
    # Clearing existing data
    self.ui.typeComboBox.clear()

    informationsList = []

    # Update informations comboBox
    selectedLayerName = self.ui.layerComboBox.currentText()
    if selectedLayerName == "Region layer":
        informationsList = ["Casi totali","Casi quotidiani","Tamponi","Dimessi guariti","Deceduti"]
    elif  selectedLayerName == "Province layer":
        informationsList = ["Casi totali","Variazione casi"]
    self.ui.typeComboBox.addItems(informationsList)


def handlePdfCheckBox(self):
    if self.ui.pdfCheckBox.isChecked():
        showPopup("warning", "Hai selezionato 'Esporta PDF'.", "Esportando il file come PDF verranno eliminati i file nella tua Table of Content. Continuare?", None, self.setPdfCheckBoxFalse)

#####################################################

#################### DATE METHODS ###################

def getCurrentDateFromUI(self):
    # Get data from UI
    pyQgisDate = self.ui.dateEdit.date() 
    currentDate = pyQgisDate.toPyDate()
    return currentDate

def getPreviousDateFromUI(self):
    # Get data from UI
    pyQgisDate = self.ui.dateEdit.date() 
    currentDate = pyQgisDate.toPyDate()

    previousDate = currentDate - timedelta(days = 1)
    return previousDate

#####################################################

#################### CSV METHODS ####################

# This method takes as parameter the Date of csv to download and return the filename in output
def downloadCsvByDate(self, date):
    dateString = str(date).replace('-', '')

    # Concatenate final CSV url
    url = dateString

    # Check selected layer
    selectedLayerName = self.ui.layerComboBox.currentText()
    filePrefix = ''

    if selectedLayerName == 'Province layer':
        url = PROV_URL_PREFIX + dateString + URL_SUFFIX
        filePrefix = 'Prov'
    elif selectedLayerName == 'Region layer':
        url = REG_URL_PREFIX + dateString + URL_SUFFIX
        filePrefix = 'Reg'
    
    # Generating filename
    fileName = filePrefix + dateString + '.csv'
    relativeFilepath = 'csv_cache/' + fileName

    csvFilepath = os.path.join(THIS_FOLDER, relativeFilepath)

    # Check if file exists in cache
    if not os.path.isfile(csvFilepath):
        try:
            response = requests.get(url, timeout=10)
        except:
            raise Exception("Richiesta rifiutata. Controlla la tua connessione Internet.")

        if response.status_code == 404:
            raise Exception("Impossibile recuperare le informazioni alla data selezionata.")
    
        open(csvFilepath, 'wb').write(response.content)
        
    return fileName

def fixDownloadedCsv(self, csvFilepath, layerName):
    # Fixing downloaded csv
    if layerName == 'Region layer':
        fixRegionCsv(csvFilepath)
    elif layerName == 'Province layer':
        calculateCasesVariation(self, csvFilepath)
    
    addDenominationToCsvField(csvFilepath)

# This method perform table joins between a .shp file and a .csv file in their reg/prov code
def performTableJoin(self, csvFilename, layerType):
    csvFilepath = THIS_FOLDER + "/csv_cache/" + csvFilename
    csvUri = "file:///" + csvFilepath

    fixDownloadedCsv(self, csvFilepath, layerType)

    csv = QgsVectorLayer(csvUri, "csv", "delimitedtext")

    if layerType == REGION_LAYER:
        shp = layersMap['Region layer']
        csvField = 'denominazione_regione'
        shpField='DEN_REG'
    elif layerType == PROVINCE_LAYER:
        shp = layersMap['Province layer']
        csvField = 'sigla_provincia'
        shpField='SIGLA' 

    joinObject = QgsVectorLayerJoinInfo()
    joinObject.setJoinFieldName(csvField)
    joinObject.setTargetFieldName(shpField)
    joinObject.setJoinLayerId(csv.id())
    
    joinObject.setUsingMemoryCache(True)
    joinObject.setJoinLayer(csv)
    QgsMessageLog.logMessage( csvUri, 'MyPlugin', level=Qgis.Info)
    
    shp.addJoin(joinObject)

    shp.selectAll()
    # Clear dictionary
    if "Join result" in layersMap:
       del layersMap["Join result"] # In order to avoid duplicated entries

    layersMap["Join result"] = processing.run("native:saveselectedfeatures", {'INPUT': shp, 'OUTPUT': 'memory:'})['OUTPUT']
    
    # Modify layer name from output to csvFilename
    layerName = csvFilename.replace(".csv","")
    layersMap["Join result"].setName(layerName)

    shp.removeSelection()

# This method adapt retrieved region CSV in order to be abled to perform join
def fixRegionCsv(csvFilepath):
    csv = pd.read_csv(csvFilepath)

    if csv.shape[0] > 20: # Check if Csv was fixed previously
        csv.iloc[11,2]  = 4  # Change region code to 4
        csv.iloc[11,3]  = 'Trentino-Alto Adige'  # Change region name

        for x in range(6, 20):  # Merging Bolzano and Trento rows
            csv.iloc[11,x]  += csv.iloc[12,x]

        csv.drop(12,axis=0,inplace=True) # Drop Bolzano row
        csv.to_csv(csvFilepath) # Saving updated CSV 

# This method adapt retrieved province CSV in order to get cases variation data
def calculateCasesVariation(self, csvFilepath):
    try: 
        previousDate = getPreviousDateFromUI(self)
        previousCsvFilename = downloadCsvByDate(self, previousDate)
        previousCsvFilepath = THIS_FOLDER + "/csv_cache/" + previousCsvFilename
    except Exception as ex:
        self.iface.messageBar().pushMessage("Error", str(ex), level=Qgis.Critical)
        return None

    currentCsv = pd.read_csv(csvFilepath)
    previousCsv = pd.read_csv(previousCsvFilepath)

    # Check if the csv was modified previously
    if not 'variazione' in currentCsv: 
        countRowCurrentCsv = currentCsv.shape[0]
        countRowPreviousCsv = previousCsv.shape[0]

        totalCasesVar = []
        # Take total cases of selected day from defined provinces
        for i in range(countRowCurrentCsv):
            if not (currentCsv.loc[i,"denominazione_provincia"] == "In fase di definizione/aggiornamento") and not(currentCsv.loc[i,"denominazione_provincia"] == "Fuori Regione / Provincia Autonoma"):
                totalCasesVar.append(currentCsv.loc[i, "totale_casi"])

        # Take total cases of previous day from defined provinces and subtract from the ones of next day
        count = 0
        for i in range(countRowPreviousCsv):
            if not (previousCsv.loc[i,"denominazione_provincia"] == "In fase di definizione/aggiornamento") and not(previousCsv.loc[i,"denominazione_provincia"] == "Fuori Regione / Provincia Autonoma"):
                totalCasesVar[count] -= previousCsv.loc[i, "totale_casi"]
                count += 1

        # Create the column variation 
        currentCsv.insert(10, "variazione", 0, True) 

        # Put variation value in the new column 'variazione'
        count = 0
        for i in range(countRowCurrentCsv):
            if not (currentCsv.loc[i,"denominazione_provincia"] == "In fase di definizione/aggiornamento") and not(currentCsv.loc[i,"denominazione_provincia"] == "Fuori Regione / Provincia Autonoma"):
                currentCsv.loc[i,"variazione"] += totalCasesVar[count]
                count += 1

        currentCsv.to_csv(csvFilepath) # Saving updated CSV 
    
def addDenominationToCsvField(csvFilepath):
    csv = pd.read_csv(csvFilepath)
    csvName = csvFilepath.split("/").pop()
    countRow = csv.shape[0]

    # Check if the column wasn't previously added and if it's a prov/reg csv
    if ("Prov" in csvName) and (not 'den_totale_casi' in csv):
        # Create the columns 'den_totale_casi' and 'den_variazione'
        csv.insert(11, "den_totale_casi", 0, True) 
        csv.insert(12, "den_variazione", 0, True)

        # Init 'den_totale_casi' and 'den_variazione' columns and append province denomination as value of each row
        for i in range(countRow):
            if not (csv.loc[i,"denominazione_provincia"] == "In fase di definizione/aggiornamento") and not(csv.loc[i,"denominazione_provincia"] == "Fuori Regione / Provincia Autonoma"):
                csv.loc[i,"den_totale_casi"] = csv.loc[i,"denominazione_provincia"] + " " + str(csv.loc[i,"totale_casi"])
                csv.loc[i,"den_variazione"] = csv.loc[i,"denominazione_provincia"] + " " + str(csv.loc[i,"variazione"])
            
    elif ("Reg" in csvName) and (not 'den_totale_casi' in csv):
        # Create the columns 'den_totale_casi' and 'den_variazione'
        csv.insert(21,"den_totale_casi", 0, True) 
        csv.insert(22,"den_nuovi_positivi", 0, True) 
        csv.insert(23,"den_tamponi", 0, True)  
        csv.insert(24,"den_dimessi_guariti", 0, True) 
        csv.insert(25,"den_deceduti", 0, True) 

        # Init 'den_totale_casi' and 'den_variazione' columns and append province denomination as value of each row
        for i in range(countRow):
            csv.loc[i,"den_totale_casi"] = csv.loc[i,"denominazione_regione"] + " " + str(csv.loc[i,"totale_casi"])
            csv.loc[i,"den_nuovi_positivi"] = csv.loc[i,"denominazione_regione"] + " " + str(csv.loc[i,"nuovi_positivi"])
            csv.loc[i,"den_tamponi"] = csv.loc[i,"denominazione_regione"] + " " + str(csv.loc[i,"tamponi"])
            csv.loc[i,"den_dimessi_guariti"] = csv.loc[i,"denominazione_regione"] + " " + str(csv.loc[i,"dimessi_guariti"])
            csv.loc[i,"den_deceduti"] = csv.loc[i,"denominazione_regione"] + " " + str(csv.loc[i,"deceduti"])
    
    # Saving updated CSV
    csv.to_csv(csvFilepath)

#####################################################