# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CovidAnalyzer
                                 A QGIS plugin
 This plugin tracks Covid-19 cases
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by  
        email                :  
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Qgis library
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QProgressBar
from qgis.core import *

from qgis.gui import (
    QgsMapCanvas,
    QgsVertexMarker,
    QgsMapCanvasItem,
    QgsRubberBand,
    QgsMessageBar
)
# Initialize Qt resources from file resources.py
from .resources import *

# Data url retrieve library
import urllib.request
from urllib.error import URLError, HTTPError

# Import the code for the dialog
from .covid_analyzer_dialog import CovidAnalyzerDialog

# Utility import
import os.path
import os
import io
import time
from tempfile import TemporaryFile


# Absolute path of plugin folder
THIS_FOLDER = os.path.dirname(os.path.abspath(__file__))

# Path of Region layer file and Province layer file 
PROV_PATH = os.path.join(THIS_FOLDER, 'layers/italy_boundaries/italy_prov/ProvCM01012020_WGS84.shp')
REG_PATH = os.path.join(THIS_FOLDER, 'layers/italy_boundaries/italy_reg/Reg01012020_WGS84.shp')

# Instantiate layers
reg_layer = QgsVectorLayer(REG_PATH, "Region layer", "ogr")
prov_layer = QgsVectorLayer(PROV_PATH, "Province layer", "ogr")

# Static declaration of layersMap
layersMap = {"Province layer": prov_layer, "Region layer": reg_layer}

# Instantiate a global canvas
canvas = QgsMapCanvas()

# Csv costant prefixs and suffix
PROV_URL_PREFIX = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province-'
REG_URL_PREFIX = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni-'
URL_SUFFIX = '.csv'

class CovidAnalyzer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CovidAnalyzer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Covid Analyzer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CovidAnalyzer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/covid_analyzer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Check pandemic data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Covid Analyzer'),
                action)
            self.iface.removeToolBarIcon(action)

    def showLabels(self):
        lyr_name = self.dlg.layerComboBox.currentText()
        the_layer = layersMap[lyr_name]
        pal_layer = QgsPalLayerSettings()
        pal_layer.fieldName = 'DEN_PROV'
        pal_layer.enabled = True
        pal_layer.placement = QgsPalLayerSettings.OverPoint
        labels = QgsVectorLayerSimpleLabeling(pal_layer)
        the_layer.setLabeling(labels)
        the_layer.setLabelsEnabled(True)
        the_layer.triggerRepaint()


    def showCanvas(self):
        
        downloadSelectedCsv(self)
        canvas.setCanvasColor(Qt.white)
        canvas.enableAntiAliasing(True)
        canvas.move(50,50)
        canvas.show()
        lyr_name = self.dlg.layerComboBox.currentText()
        the_layer = layersMap[lyr_name]
        if not the_layer.isValid():
            print("Layer failed to load!")

        # set extent to the extent of our layer
        canvas.setExtent(the_layer.extent())

        # set the map canvas layer set
        canvas.setLayers([the_layer])

        self.showLabels()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CovidAnalyzerDialog()

        # show the dialog
        self.dlg.show()

        initComponentsGUI(self)

        self.dlg.applyButton.clicked.connect(self.showCanvas)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

def initComponentsGUI(self):

    # Clearing existing data
    self.dlg.typeComboBox.clear()
    self.dlg.layerComboBox.clear()

    # Init informations comboBox
    informationsList = ["Casi totali","Casi quotidiani","Morti totali","Morti quotidiane"]
    self.dlg.typeComboBox.addItems(informationsList)

    # Init layers comboBox
    layersNameList = ["Province layer", "Region layer"]
    self.dlg.layerComboBox.addItems(layersNameList)
    

def downloadSelectedCsv(self):
    # Get data from UI
    pyQgisDate = self.dlg.dateEdit.date() 
    dateString = pyQgisDate.toPyDate()
    dateString = str(dateString).replace('-', '')

    # Concatenate final CSV url
    url = dateString

    # Check selected layer
    selectedLayerName = self.dlg.layerComboBox.currentText()
    filePrefix = ''

    if selectedLayerName == 'Province layer':
        url = PROV_URL_PREFIX + dateString + URL_SUFFIX
        filePrefix = 'Prov'
    elif selectedLayerName == 'Region layer':
        url = REG_URL_PREFIX + dateString + URL_SUFFIX
        filePrefix = 'Reg'
    
    # Generating filename
    fileName = filePrefix + dateString + '.csv'
    relativeFilepath = 'csv_cache/' + fileName

    csvFile = os.path.join(THIS_FOLDER, relativeFilepath)

    # Check if file exists in cache
    if not os.path.isfile(csvFile):
        try:
            response =  urllib.request.urlretrieve(url, csvFile) 
        except HTTPError as e:
            self.iface.messageBar().pushMessage("Error", "Cannot retrieve any csv data at selected date", level=Qgis.Critical)
        except URLError as e:
            self.iface.messageBar().pushMessage("Error", "Request rejected. Check your internet connection", level=Qgis.Critical)
